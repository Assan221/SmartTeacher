'use client'

import { useState, useRef, useEffect } from 'react'
import { aiService, type ChatMessage } from '@/lib/openai'
import { materialService } from '@/lib/database'
import PDFExporter from './PDFExporter'

interface ClassChatProps {
  classId: string
  className: string
}

export default function ClassChat({ classId, className }: ClassChatProps) {
  const [messages, setMessages] = useState<ChatMessage[]>([])
  const [inputMessage, setInputMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const messagesEndRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!inputMessage.trim() || isLoading) return

    const userMessage: ChatMessage = {
      role: 'user',
      content: inputMessage.trim()
    }

    setMessages(prev => [...prev, userMessage])
    setInputMessage('')
    setIsLoading(true)
    setError('')

    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
      const aiResponse = await aiService.chat([...messages, userMessage])
      
      const assistantMessage: ChatMessage = {
        role: 'assistant',
        content: aiResponse
      }

      setMessages(prev => [...prev, assistantMessage])

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –µ—Å–ª–∏ –ò–ò —Å–æ–∑–¥–∞–ª –∏—Ö
      await handleAutoSaveMaterials(userMessage.content, aiResponse)

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.')
    } finally {
      setIsLoading(false)
    }
  }

  const handleAutoSaveMaterials = async (userPrompt: string, aiResponse: string) => {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
      const prompt = userPrompt.toLowerCase()
      const response = aiResponse.toLowerCase()

      let materialType: &apos;lesson_plan&apos; | &apos;presentation&apos; | &apos;test&apos; | &apos;document&apos; | null = null
      let title = ''

      if (prompt.includes(&apos;–ø–ª–∞–Ω —É—Ä–æ–∫–∞&apos;) || prompt.includes(&apos;—É—Ä–æ–∫&apos;) || response.includes(&apos;–ø–ª–∞–Ω —É—Ä–æ–∫–∞&apos;)) {
        materialType = &apos;lesson_plan&apos;
        title = `–ü–ª–∞–Ω —É—Ä–æ–∫–∞ –¥–ª—è ${className}`
      } else if (prompt.includes(&apos;–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è&apos;) || prompt.includes(&apos;–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è&apos;) || response.includes(&apos;–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è&apos;) || response.includes(&apos;—Å–ª–∞–π–¥&apos;)) {
        materialType = &apos;presentation&apos;
        title = `–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è ${className}`
      } else if (prompt.includes(&apos;—Ç–µ—Å—Ç&apos;) || prompt.includes(&apos;–∑–∞–¥–∞–Ω–∏–µ&apos;) || response.includes(&apos;—Ç–µ—Å—Ç&apos;) || response.includes(&apos;–≤–æ–ø—Ä–æ—Å&apos;)) {
        materialType = &apos;test&apos;
        title = `–¢–µ—Å—Ç –¥–ª—è ${className}`
      } else if (prompt.includes(&apos;–¥–æ–∫—É–º–µ–Ω—Ç&apos;) || prompt.includes(&apos;—Ñ–∞–π–ª&apos;) || response.includes(&apos;–¥–æ–∫—É–º–µ–Ω—Ç&apos;)) {
        materialType = &apos;document&apos;
        title = `–î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è ${className}`
      }

      // –ï—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
      if (materialType) {
        await materialService.createMaterial({
          class_id: classId,
          type: materialType,
          title,
          content: aiResponse,
          ai_generated: true
        })
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error)
    }
  }

  const handleQuickAction = async (action: string) => {
    const quickPrompts: Record<string, string> = {
      lesson: `–°–æ–∑–¥–∞–π –ø–ª–∞–Ω —É—Ä–æ–∫–∞ –¥–ª—è –∫–ª–∞—Å—Å–∞ ${className}. –£–∫–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç, —Ç–µ–º—É –∏ —Ü–µ–ª–∏ —É—Ä–æ–∫–∞.`,
      presentation: `–°–æ–∑–¥–∞–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–ª–∞—Å—Å–∞ ${className}. –£–∫–∞–∂–∏ —Ç–µ–º—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤.`,
      test: `–°–æ–∑–¥–∞–π —Ç–µ—Å—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞ ${className}. –£–∫–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç, —Ç–µ–º—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤.`,
      homework: `–ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞ ${className}.`,
      activity: `–ü—Ä–µ–¥–ª–æ–∂–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —É—Ä–æ–∫–∞ –≤ –∫–ª–∞—Å—Å–µ ${className}.`
    }

    const prompt = quickPrompts[action]
    if (prompt && !isLoading) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
      setInputMessage(prompt)
      
      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userMessage: ChatMessage = {
        role: 'user',
        content: prompt
      }

      setMessages(prev => [...prev, userMessage])
      setInputMessage('')
      setIsLoading(true)
      setError('')

      try {
        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        const aiResponse = await aiService.chat([...messages, userMessage])
        
        const assistantMessage: ChatMessage = {
          role: 'assistant',
          content: aiResponse
        }

        setMessages(prev => [...prev, assistantMessage])
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
        await handleAutoSaveMaterials(prompt, aiResponse)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò:', error)
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
      } finally {
        setIsLoading(false)
      }
    }
  }

  return (
    <div className="flex flex-col h-full bg-white rounded-lg border border-gray-200">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
      <div className="p-4 border-b border-gray-200 bg-gray-50">
        <h3 className="text-lg font-semibold text-gray-900">AI –ß–∞—Ç –¥–ª—è {className}</h3>
        <p className="text-sm text-gray-600">–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –ø–æ–º–æ—â—å—é –ò–ò</p>
      </div>

      {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="p-4 border-b border-gray-200">
        <div className="flex flex-wrap gap-2">
          <button
            onClick={() => handleQuickAction('lesson')}
            className="px-3 py-1 text-xs bg-blue-100 text-blue-700 rounded-full hover:bg-blue-200 transition-colors"
          >
            üìö –ü–ª–∞–Ω —É—Ä–æ–∫–∞
          </button>
          <button
            onClick={() => handleQuickAction('presentation')}
            className="px-3 py-1 text-xs bg-green-100 text-green-700 rounded-full hover:bg-green-200 transition-colors"
          >
            üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è
          </button>
          <button
            onClick={() => handleQuickAction('test')}
            className="px-3 py-1 text-xs bg-purple-100 text-purple-700 rounded-full hover:bg-purple-200 transition-colors"
          >
            üìù –¢–µ—Å—Ç
          </button>
          <button
            onClick={() => handleQuickAction('homework')}
            className="px-3 py-1 text-xs bg-orange-100 text-orange-700 rounded-full hover:bg-orange-200 transition-colors"
          >
            üè† –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
          </button>
          <button
            onClick={() => handleQuickAction('activity')}
            className="px-3 py-1 text-xs bg-pink-100 text-pink-700 rounded-full hover:bg-pink-200 transition-colors"
          >
            üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          </button>
        </div>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.length === 0 && (
          <div className="text-center py-8 text-gray-500 text-gray-400">
            <div className="text-4xl mb-4">ü§ñ</div>
            <p>–ü—Ä–∏–≤–µ—Ç! –Ø SmartUstaz AI –¥–ª—è –∫–ª–∞—Å—Å–∞ {className}.</p>
            <p className="text-sm mt-2">–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é –∫–æ–º–∞–Ω–¥—É –≤—ã—à–µ.</p>
            <div className="mt-4 text-left bg-gray-50 rounded-lg p-4">
              <h4 className="font-semibold mb-2 text-gray-900">–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</h4>
              <ul className="space-y-1 text-sm text-gray-600">
                <li>‚Ä¢ "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω —É—Ä–æ–∫–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ"</li>
                <li>‚Ä¢ "–°–¥–µ–ª–∞–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –±–∏–æ–ª–æ–≥–∏–∏"</li>
                <li>‚Ä¢ "–°–æ–∑–¥–∞–π —Ç–µ—Å—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏–∏"</li>
                <li>‚Ä¢ "–ü—Ä–∏–¥—É–º–∞–π –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"</li>
              </ul>
            </div>
          </div>
        )}

        {messages.map((message, index) => (
          <div
            key={index}
            className={`flex ${message.role === &apos;user&apos; ? &apos;justify-end&apos; : &apos;justify-start&apos;}`}
          >
            <div className="max-w-3xl">
              <div
                className={`px-4 py-3 rounded-lg ${
                  message.role === 'user'
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-100 text-gray-900'
                }`}
              >
                <div className="whitespace-pre-wrap">{message.content}</div>
              </div>
              
              {/* –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò */}
              {message.role === 'assistant' && (
                <div className="mt-2 flex justify-start">
                  <PDFExporter
                    content={message.content}
                    title={`–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è ${className}`}
                    className="text-xs"
                  />
                </div>
              )}
            </div>
          </div>
        ))}

        {isLoading && (
          <div className="flex justify-start">
            <div className="bg-gray-100 text-gray-900 px-4 py-3 rounded-lg">
              <div className="flex items-center space-x-2">
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600 border-gray-400"></div>
                <span>–ò–ò –¥—É–º–∞–µ—Ç...</span>
              </div>
            </div>
          </div>
        )}

        {error && (
          <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
            {error}
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ */}
      <div className="p-4 border-t border-gray-200">
        <form onSubmit={handleSendMessage} className="flex space-x-3">
          <input
            type="text"
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É..."
            className="flex-1 px-4 py-2 border border-gray-300 border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 bg-white bg-gray-700 placeholder-gray-500 placeholder-gray-400"
            disabled={isLoading}
          />
          <button
            type="submit"
            disabled={isLoading || !inputMessage.trim()}
            className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </button>
        </form>
      </div>
    </div>
  )
}
