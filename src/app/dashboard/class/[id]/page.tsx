'use client'

import { useState, useEffect, useCallback } from 'react'
import { useParams } from 'next/navigation'
import { useAuth } from '@/contexts/AuthContext'
import ProtectedRoute from '@/components/ProtectedRoute'
import Link from 'next/link'
import { classService, materialService } from '@/lib/database'
import ClassChat from '@/components/ClassChat'
import PDFExporter from '@/components/PDFExporter'
import { getSubjectColor, formatTimeAgo } from '@/utils/subjectColors'
import type { Class, Material } from '@/types/database'

export default function ClassDetailPage() {
  const { user } = useAuth()
  const params = useParams()
  const classId = params.id as string
  
  const [classData, setClassData] = useState<Class | null>(null)
  const [materials, setMaterials] = useState<Material[]>([])
  const [activeSection, setActiveSection] = useState('chat')
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (classId) {
      loadClassData()
      loadMaterials()
    }
  }, [classId, loadClassData, loadMaterials])

  const loadClassData = useCallback(async () => {
    try {
      const classes = await classService.getClasses()
      const classItem = classes.find(c => c.id === classId)
      setClassData(classItem || null)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∞—Å—Å–∞:', error)
    }
  }, [classId])

  const loadMaterials = useCallback(async () => {
    try {
      const data = await materialService.getMaterials(classId)
      setMaterials(data)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', error)
    } finally {
      setLoading(false)
    }
  }, [classId])

  const getMaterialsByType = (type: Material['type']) => {
    return materials.filter(m => m.type === type)
  }


  if (loading) {
    return (
      <ProtectedRoute>
        <div className="min-h-screen flex items-center justify-center bg-gray-50">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
            <p className="mt-4 text-gray-600 text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        </div>
      </ProtectedRoute>
    )
  }

  if (!classData) {
    return (
      <ProtectedRoute>
        <div className="min-h-screen flex items-center justify-center bg-gray-50">
          <div className="text-center">
            <div className="text-6xl mb-4">‚ùå</div>
            <h2 className="text-2xl font-bold text-gray-900 text-gray-100 mb-2">–ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
            <p className="text-gray-600 text-gray-400 mb-4">–í–æ–∑–º–æ–∂–Ω–æ, –∫–ª–∞—Å—Å –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É</p>
            <Link
              href="/dashboard"
              className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–ª–∞—Å—Å–∞–º
            </Link>
          </div>
        </div>
      </ProtectedRoute>
    )
  }

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-gray-50 flex">
        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞–º–∏ */}
        <div className="w-80 bg-white shadow-lg flex flex-col">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–ª–∞—Å—Å–∞ */}
          <div className="p-6 border-b border-gray-200">
            <div className="flex items-center space-x-3 mb-2">
              {(() => {
                const subjectInfo = getSubjectColor(classData.title)
                return (
                  <div className={`w-12 h-12 rounded-lg ${subjectInfo.bgColor} flex items-center justify-center`}>
                    <span className="text-2xl">{subjectInfo.icon}</span>
                  </div>
                )
              })()}
              <div>
                <h1 className="text-xl font-bold text-gray-900 text-gray-100">{classData.title}</h1>
                <p className="text-sm text-gray-600 text-gray-400">–ö–ª–∞—Å—Å</p>
              </div>
            </div>
            <Link
              href="/dashboard"
              className="text-blue-600 text-blue-400 hover:text-blue-800 hover:text-blue-300 text-sm"
            >
              ‚Üê –ù–∞–∑–∞–¥ –∫ –∫–ª–∞—Å—Å–∞–º
            </Link>
          </div>

          {/* –ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã */}
          <nav className="flex-1 p-4">
            <div className="space-y-1">
              <button
                onClick={() => setActiveSection('chat')}
                className={`w-full text-left px-4 py-3 rounded-lg transition-colors ${
                  activeSection === 'chat'
                    ? 'bg-blue-50 text-blue-700 font-medium'
                    : 'text-gray-700 text-gray-300 hover:bg-gray-100 hover:bg-gray-700'
                }`}
              >
                ü§ñ AI –ß–∞—Ç
              </button>
              <button
                onClick={() => setActiveSection('lessons')}
                className={`w-full text-left px-4 py-3 rounded-lg transition-colors ${
                  activeSection === 'lessons'
                    ? 'bg-blue-50 text-blue-700 font-medium'
                    : 'text-gray-700 text-gray-300 hover:bg-gray-100 hover:bg-gray-700'
                }`}
              >
                üìÑ –ü–ª–∞–Ω—ã —É—Ä–æ–∫–æ–≤ ({getMaterialsByType('lesson_plan').length})
              </button>
              <button
                onClick={() => setActiveSection('presentations')}
                className={`w-full text-left px-4 py-3 rounded-lg transition-colors ${
                  activeSection === 'presentations'
                    ? 'bg-blue-50 text-blue-700 font-medium'
                    : 'text-gray-700 text-gray-300 hover:bg-gray-100 hover:bg-gray-700'
                }`}
              >
                üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ ({getMaterialsByType('presentation').length})
              </button>
              <button
                onClick={() => setActiveSection('tests')}
                className={`w-full text-left px-4 py-3 rounded-lg transition-colors ${
                  activeSection === 'tests'
                    ? 'bg-blue-50 text-blue-700 font-medium'
                    : 'text-gray-700 text-gray-300 hover:bg-gray-100 hover:bg-gray-700'
                }`}
              >
                üìù –¢–µ—Å—Ç—ã –∏ –∑–∞–¥–∞–Ω–∏—è ({getMaterialsByType('test').length})
              </button>
              <button
                onClick={() => setActiveSection('documents')}
                className={`w-full text-left px-4 py-3 rounded-lg transition-colors ${
                  activeSection === 'documents'
                    ? 'bg-blue-50 text-blue-700 font-medium'
                    : 'text-gray-700 text-gray-300 hover:bg-gray-100 hover:bg-gray-700'
                }`}
              >
                üìÇ –î–æ–∫—É–º–µ–Ω—Ç—ã ({getMaterialsByType('document').length})
              </button>
            </div>
          </nav>

          {/* –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
          <div className="p-4 border-t border-gray-200">
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm font-medium">
                {user?.email?.charAt(0).toUpperCase()}
              </div>
              <div className="flex-1 min-w-0">
                <p className="text-sm font-medium text-gray-900 truncate">
                  {user?.email}
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å */}
        <div className="flex-1 flex flex-col">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ */}
          <div className="bg-white shadow-sm border-b border-gray-200 p-6">
            <div className="flex justify-between items-start">
              <div>
                <h2 className="text-2xl font-semibold text-gray-900 text-gray-100">
                  {activeSection === 'chat' && 'AI –ß–∞—Ç'}
                  {activeSection === 'lessons' && '–ü–ª–∞–Ω—ã —É—Ä–æ–∫–æ–≤'}
                  {activeSection === 'presentations' && '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏'}
                  {activeSection === 'tests' && '–¢–µ—Å—Ç—ã –∏ –∑–∞–¥–∞–Ω–∏—è'}
                  {activeSection === 'documents' && '–î–æ–∫—É–º–µ–Ω—Ç—ã'}
                </h2>
                <p className="text-gray-600 text-gray-400 mt-1">
                  {activeSection === 'chat' && '–û–±—â–∞–π—Ç–µ—Å—å —Å –ò–ò –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤'}
                  {activeSection === 'lessons' && '–ü–ª–∞–Ω—ã —É—Ä–æ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞'}
                  {activeSection === 'presentations' && '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞'}
                  {activeSection === 'tests' && '–¢–µ—Å—Ç—ã –∏ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞'}
                  {activeSection === 'documents' && '–î–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ñ–∞–π–ª—ã –∫–ª–∞—Å—Å–∞'}
                </p>
              </div>
              {activeSection !== 'chat' && (
                <button
                  onClick={() => setActiveSection('chat')}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium"
                >
                  + –°–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª
                </button>
              )}
            </div>
          </div>

          {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–¥–µ–ª–∞ */}
          <div className="flex-1 p-6 bg-gray-50">
            <div className="max-w-6xl mx-auto">
              {activeSection === 'chat' && (
                <div className="h-full">
                  <ClassChat classId={classId} className={classData.title} />
                </div>
              )}

              {activeSection === 'lessons' && (
                <div className="space-y-6">
                  <div className="flex justify-between items-center">
                    <h3 className="text-lg font-semibold">–ü–ª–∞–Ω—ã —É—Ä–æ–∫–æ–≤</h3>
                  </div>
                  {getMaterialsByType('lesson_plan').length === 0 ? (
                    <div className="text-center py-12 bg-white rounded-lg border border-gray-200">
                      <div className="text-4xl mb-4">üìö</div>
                      <p className="text-gray-600">–ü–ª–∞–Ω–æ–≤ —É—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                      <p className="text-sm text-gray-500">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é –ò–ò</p>
                    </div>
                  ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {getMaterialsByType('lesson_plan').map((material) => (
                        <div key={material.id} className="bg-white rounded-lg border border-gray-200 p-4 hover:shadow-md transition-shadow">
                          <div className="flex items-start justify-between mb-2">
                            <h4 className="font-medium text-gray-900">{material.title}</h4>
                            <span className="text-xs text-gray-400 bg-gray-100 px-2 py-1 rounded-full">
                              {formatTimeAgo(material.created_at)}
                            </span>
                          </div>
                          <p className="text-sm text-gray-500 mb-3">
                            {material.ai_generated ? 'ü§ñ –°–æ–∑–¥–∞–Ω–æ –ò–ò' : '‚úèÔ∏è –°–æ–∑–¥–∞–Ω–æ –≤—Ä—É—á–Ω—É—é'}
                          </p>
                          <div className="flex space-x-2">
                            <Link
                              href={`/dashboard/material/${material.id}`}
                              className="text-blue-600 hover:text-blue-800 text-sm"
                            >
                              –û—Ç–∫—Ä—ã—Ç—å
                            </Link>
                            <PDFExporter
                              content={material.content || ''}
                              title={material.title}
                              className="text-xs px-2 py-1"
                            />
                            <button 
                              onClick={async () => {
                                if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª?')) {
                                  try {
                                    await materialService.deleteMaterial(material.id)
                                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                                    const updatedMaterials = materials.filter(m => m.id !== material.id)
                                    setMaterials(updatedMaterials)
                                  } catch (error) {
                                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error)
                                    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª')
                                  }
                                }
                              }}
                              className="text-red-600 hover:text-red-800 text-sm"
                            >
                              –£–¥–∞–ª–∏—Ç—å
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              )}

              {activeSection === 'presentations' && (
                <div className="space-y-6">
                  <div className="flex justify-between items-center">
                    <h3 className="text-lg font-semibold">–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏</h3>
                  </div>
                  {getMaterialsByType('presentation').length === 0 ? (
                    <div className="text-center py-12 bg-white rounded-lg border border-gray-200">
                      <div className="text-4xl mb-4">üìä</div>
                      <p className="text-gray-600">–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</p>
                      <p className="text-sm text-gray-500">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –ò–ò</p>
                    </div>
                  ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {getMaterialsByType('presentation').map((material) => (
                        <div key={material.id} className="bg-white rounded-lg border border-gray-200 p-4 hover:shadow-md transition-shadow">
                          <div className="flex items-start justify-between mb-2">
                            <h4 className="font-medium text-gray-900">{material.title}</h4>
                            <span className="text-xs text-gray-400 bg-gray-100 px-2 py-1 rounded-full">
                              {formatTimeAgo(material.created_at)}
                            </span>
                          </div>
                          <p className="text-sm text-gray-500 mb-3">
                            {material.ai_generated ? 'ü§ñ –°–æ–∑–¥–∞–Ω–æ –ò–ò' : '‚úèÔ∏è –°–æ–∑–¥–∞–Ω–æ –≤—Ä—É—á–Ω—É—é'}
                          </p>
                          <div className="flex space-x-2">
                            <Link
                              href={`/dashboard/material/${material.id}`}
                              className="text-blue-600 hover:text-blue-800 text-sm"
                            >
                              –û—Ç–∫—Ä—ã—Ç—å
                            </Link>
                            <PDFExporter
                              content={material.content || ''}
                              title={material.title}
                              className="text-xs px-2 py-1"
                            />
                            <button 
                              onClick={async () => {
                                if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª?')) {
                                  try {
                                    await materialService.deleteMaterial(material.id)
                                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                                    const updatedMaterials = materials.filter(m => m.id !== material.id)
                                    setMaterials(updatedMaterials)
                                  } catch (error) {
                                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error)
                                    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª')
                                  }
                                }
                              }}
                              className="text-red-600 hover:text-red-800 text-sm"
                            >
                              –£–¥–∞–ª–∏—Ç—å
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              )}

              {activeSection === 'tests' && (
                <div className="space-y-6">
                  <div className="flex justify-between items-center">
                    <h3 className="text-lg font-semibold">–¢–µ—Å—Ç—ã –∏ –∑–∞–¥–∞–Ω–∏—è</h3>
                  </div>
                  {getMaterialsByType('test').length === 0 ? (
                    <div className="text-center py-12 bg-white rounded-lg border border-gray-200">
                      <div className="text-4xl mb-4">üìù</div>
                      <p className="text-gray-600">–¢–µ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                      <p className="text-sm text-gray-500">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò</p>
                    </div>
                  ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {getMaterialsByType('test').map((material) => (
                        <div key={material.id} className="bg-white rounded-lg border border-gray-200 p-4 hover:shadow-md transition-shadow">
                          <div className="flex items-start justify-between mb-2">
                            <h4 className="font-medium text-gray-900">{material.title}</h4>
                            <span className="text-xs text-gray-400 bg-gray-100 px-2 py-1 rounded-full">
                              {formatTimeAgo(material.created_at)}
                            </span>
                          </div>
                          <p className="text-sm text-gray-500 mb-3">
                            {material.ai_generated ? 'ü§ñ –°–æ–∑–¥–∞–Ω–æ –ò–ò' : '‚úèÔ∏è –°–æ–∑–¥–∞–Ω–æ –≤—Ä—É—á–Ω—É—é'}
                          </p>
                          <div className="flex space-x-2">
                            <Link
                              href={`/dashboard/material/${material.id}`}
                              className="text-blue-600 hover:text-blue-800 text-sm"
                            >
                              –û—Ç–∫—Ä—ã—Ç—å
                            </Link>
                            <PDFExporter
                              content={material.content || ''}
                              title={material.title}
                              className="text-xs px-2 py-1"
                            />
                            <button 
                              onClick={async () => {
                                if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª?')) {
                                  try {
                                    await materialService.deleteMaterial(material.id)
                                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                                    const updatedMaterials = materials.filter(m => m.id !== material.id)
                                    setMaterials(updatedMaterials)
                                  } catch (error) {
                                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error)
                                    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª')
                                  }
                                }
                              }}
                              className="text-red-600 hover:text-red-800 text-sm"
                            >
                              –£–¥–∞–ª–∏—Ç—å
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              )}


              {activeSection === 'documents' && (
                <div className="space-y-6">
                  <div className="flex justify-between items-center">
                    <h3 className="text-lg font-semibold">–î–æ–∫—É–º–µ–Ω—Ç—ã</h3>
                  </div>
                  {getMaterialsByType('document').length === 0 ? (
                    <div className="text-center py-12 bg-white rounded-lg border border-gray-200">
                      <div className="text-4xl mb-4">üìÇ</div>
                      <p className="text-gray-600">–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                      <p className="text-sm text-gray-500">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò</p>
                    </div>
                  ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {getMaterialsByType('document').map((material) => (
                        <div key={material.id} className="bg-white rounded-lg border border-gray-200 p-4 hover:shadow-md transition-shadow">
                          <div className="flex items-start justify-between mb-2">
                            <h4 className="font-medium text-gray-900">{material.title}</h4>
                            <span className="text-xs text-gray-400 bg-gray-100 px-2 py-1 rounded-full">
                              {formatTimeAgo(material.created_at)}
                            </span>
                          </div>
                          <p className="text-sm text-gray-500 mb-3">
                            {material.ai_generated ? 'ü§ñ –°–æ–∑–¥–∞–Ω–æ –ò–ò' : '‚úèÔ∏è –°–æ–∑–¥–∞–Ω–æ –≤—Ä—É—á–Ω—É—é'}
                          </p>
                          <div className="flex space-x-2">
                            <Link
                              href={`/dashboard/material/${material.id}`}
                              className="text-blue-600 hover:text-blue-800 text-sm"
                            >
                              –û—Ç–∫—Ä—ã—Ç—å
                            </Link>
                            <PDFExporter
                              content={material.content || ''}
                              title={material.title}
                              className="text-xs px-2 py-1"
                            />
                            <button 
                              onClick={async () => {
                                if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª?')) {
                                  try {
                                    await materialService.deleteMaterial(material.id)
                                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                                    const updatedMaterials = materials.filter(m => m.id !== material.id)
                                    setMaterials(updatedMaterials)
                                  } catch (error) {
                                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error)
                                    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª')
                                  }
                                }
                              }}
                              className="text-red-600 hover:text-red-800 text-sm"
                            >
                              –£–¥–∞–ª–∏—Ç—å
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </ProtectedRoute>
  )
}
