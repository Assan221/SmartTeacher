// –¶–≤–µ—Ç–∞ –∏ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
export const subjectColors: Record<string, { color: string; bgColor: string; icon: string }> = {
  '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': { color: 'text-green-700', bgColor: 'bg-green-100', icon: 'üî¢' },
  '–∏—Å—Ç–æ—Ä–∏—è': { color: 'text-blue-700', bgColor: 'bg-blue-100', icon: 'üìú' },
  '–±–∏–æ–ª–æ–≥–∏—è': { color: 'text-emerald-700', bgColor: 'bg-emerald-100', icon: 'üß¨' },
  '—Ñ–∏–∑–∏–∫–∞': { color: 'text-purple-700', bgColor: 'bg-purple-100', icon: '‚öõÔ∏è' },
  '—Ö–∏–º–∏—è': { color: 'text-orange-700', bgColor: 'bg-orange-100', icon: 'üß™' },
  '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': { color: 'text-pink-700', bgColor: 'bg-pink-100', icon: 'üìö' },
  '—Ä—É—Å—Å–∫–∏–π': { color: 'text-red-700', bgColor: 'bg-red-100', icon: 'üìù' },
  '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π': { color: 'text-indigo-700', bgColor: 'bg-indigo-100', icon: 'üá¨üáß' },
  '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è': { color: 'text-teal-700', bgColor: 'bg-teal-100', icon: 'üåç' },
  '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': { color: 'text-cyan-700', bgColor: 'bg-cyan-100', icon: 'üíª' },
  '—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞': { color: 'text-yellow-700', bgColor: 'bg-yellow-100', icon: '‚öΩ' },
  '–∏—Å–∫—É—Å—Å—Ç–≤–æ': { color: 'text-rose-700', bgColor: 'bg-rose-100', icon: 'üé®' },
  '–º—É–∑—ã–∫–∞': { color: 'text-violet-700', bgColor: 'bg-violet-100', icon: 'üéµ' },
  '–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ': { color: 'text-amber-700', bgColor: 'bg-amber-100', icon: 'üèõÔ∏è' },
  '—ç–∫–æ–Ω–æ–º–∏–∫–∞': { color: 'text-lime-700', bgColor: 'bg-lime-100', icon: 'üí∞' },
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
export function getSubjectColor(subject: string | undefined | null) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ subject —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
  if (!subject || typeof subject !== 'string') {
    return { color: 'text-gray-700', bgColor: 'bg-gray-100', icon: 'üìñ' }
  }

  const normalizedSubject = subject.toLowerCase().trim()
  
  // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (subjectColors[normalizedSubject]) {
    return subjectColors[normalizedSubject]
  }
  
  // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  for (const [key, value] of Object.entries(subjectColors)) {
    if (normalizedSubject.includes(key) || key.includes(normalizedSubject)) {
      return value
    }
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ü–≤–µ—Ç
  return { color: 'text-gray-700', bgColor: 'bg-gray-100', icon: 'üìñ' }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
export function formatTimeAgo(date: string | Date): string {
  const now = new Date()
  const past = new Date(date)
  const diffInSeconds = Math.floor((now.getTime() - past.getTime()) / 1000)
  
  if (diffInSeconds < 60) {
    return '—Ç–æ–ª—å–∫–æ —á—Ç–æ'
  } else if (diffInSeconds < 3600) {
    const minutes = Math.floor(diffInSeconds / 60)
    return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`
  } else if (diffInSeconds < 86400) {
    const hours = Math.floor(diffInSeconds / 3600)
    return `${hours} —á –Ω–∞–∑–∞–¥`
  } else if (diffInSeconds < 604800) {
    const days = Math.floor(diffInSeconds / 86400)
    return `${days} –¥–Ω –Ω–∞–∑–∞–¥`
  } else {
    return past.toLocaleDateString('ru-RU')
  }
}
